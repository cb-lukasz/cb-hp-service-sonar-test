buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath('net.ltgt.gradle:gradle-apt-plugin:0.18')
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'jacoco'
    id 'checkstyle'
    id 'java-library'
    id 'com.github.spotbugs' version '4.7.0'
    id 'maven-publish'
    id 'groovy'
    id "org.openapi.generator" version "5.1.0"
    id "com.gorylenko.gradle-git-properties" version "2.3.1"
    id "org.sonarqube" version "3.3"
}

springBoot {
    buildInfo()
}

group = 'com.example'
version = build_version
sourceCompatibility = '1.8'
apply plugin: "application"
repositories {
    mavenCentral()
    maven {
        url artifactory_build_url
        credentials {
            username System.env.CODEARTIFACT_USER
            password System.env.CODEARTIFACT_AUTH_TOKEN
        }
    }
}
ext["groovy.version"] = "3.0.3"

sonarqube {
    properties {
        property "sonar.projectKey", "cb-lukasz_cb-hp-service-sonar-test"
        property "sonar.organization", "cb-lukasz-hp-service-sonar-test"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.core.codeCoveragePlugin', 'jacoco'
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec,${project.buildDir}/jacoco/integrationTest.exec"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/jacoco/test.xml,${project.buildDir}/jacoco/integrationTest.xml"
        property "sonar.junit.reportsPath", "${project.buildDir}/test-results/*/TEST-*.xml"
    }
}

sourceSets {
    main {
        java {
        }
    }
    integrationTest {
        java {
            compileClasspath += project.configurations.testCompileClasspath + main.output
            runtimeClasspath += project.configurations.testRuntimeClasspath + main.output
            srcDirs = [
                    'src/integrationTest/java'
            ]
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    implementation 'org.javassist:javassist:3.25.0-GA'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    compileOnly group: 'org.projectlombok', name: 'lombok'
    annotationProcessor group: 'org.projectlombok', name: 'lombok'

    implementation 'net.logstash.logback:logstash-logback-encoder:5.2'
    compile "org.slf4j:slf4j-api:1.7.25"
    implementation "ch.qos.logback:logback-classic:1.2.3"
    implementation "ch.qos.logback.contrib:logback-jackson:0.1.5"
    implementation "ch.qos.logback.contrib:logback-json-classic:0.1.5"

    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.3'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.3'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.3'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.3'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.12.3'

    // mapstruct dependencies
    implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.4.2.Final'
    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.4.2.Final'
    testImplementation group: 'org.mapstruct', name: 'mapstruct', version: '1.4.2.Final'
    testAnnotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.4.2.Final'


    // spock dependencies - for unit testing
    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.1-groovy-2.4-rc-2'
    testCompile group: 'org.spockframework', name: 'spock-spring', version: '1.1-groovy-2.4-rc-2'
    testImplementation group: 'com.h2database', name: 'h2'
    testCompile group: 'cglib', name: 'cglib-nodep', version: '2.2'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

    // swagger dependencies
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'

    implementation group: 'io.reactivex', name: 'rxjava', version: '1.3.8'
    implementation group: 'com.google.guava', name: 'guava', version: '11.0.2'
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

    //redis
    implementation group: 'org.springframework.data', name: 'spring-data-redis', version: '2.4.7'
    implementation group: 'redis.clients', name: 'jedis', version: '3.5.2'

    // other dependencies
    compile group: 'javax.inject', name: 'javax.inject', version: '1'
    compile group: 'org.json', name: 'json', version: '20190722'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    integrationTestImplementation 'com.auth0:java-jwt:3.14.0'
    integrationTestImplementation 'io.rest-assured:rest-assured:4.4.0'
    integrationTestImplementation 'io.rest-assured:json-path:4.4.0'
    integrationTestImplementation 'io.rest-assured:xml-path:4.4.0'
    integrationTestImplementation 'com.github.tomakehurst:wiremock:2.27.2'
    integrationTestImplementation 'com.github.javafaker:javafaker:1.0.2'
    integrationTestImplementation 'org.assertj:assertj-core:3.20.2'
    //integrationTestImplementation 'org.skyscreamer:jsonassert:1.5.0'

    testRuntimeOnly 'org.junit.platform:junit-platform-commons'
    testRuntimeOnly 'com.h2database:h2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter:5.4.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.4.0'
    testRuntimeOnly 'org.mockito:mockito-junit-jupiter:2.23.0'
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task jacocoIntegrationReport(type: JacocoReport) {

    executionData(file("${project.buildDir}/jacoco/integrationTest.exec"))
    sourceSets sourceSets.main
    reports {
        xml {
            enabled true // coveralls plugin depends on xml format report
            destination file("${buildDir}/jacoco/integrationTest.xml")
        }

        html {
            enabled true
            destination file("${buildDir}/jacocoIntegrationHtml")
        }
        csv {
            enabled true
        }
    }

}

task integrationTest(type: Test, group: 'verification') {

    useJUnitPlatform()
    finalizedBy jacocoIntegrationReport

    maxHeapSize = "1536M"
    environment "SPRING_PROFILES_ACTIVE", "integ"

    classpath = sourceSets.integrationTest.runtimeClasspath
    testClassesDirs = sourceSets.integrationTest.output.classesDirs.filter { it.toString().contains("java") }

    jacoco {
        enabled = true
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    jacoco {
        enabled = true
    }
}

jacocoTestReport {
    dependsOn test
    //finalizedBy integrationTest
    executionData(file("${project.buildDir}/jacoco/test.exec"))
    reports {
        xml {
            enabled true // coveralls plugin depends on xml format report
            destination file("${buildDir}/jacoco/test.xml")
        }

        html {
            enabled true
            destination file("${buildDir}/jacocoHtml")
        }
        csv {
            enabled true
        }
    }

}

jacocoTestCoverageVerification {
    executionData(file("${project.buildDir}/jacoco/test.exec"))
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

checkstyle {
    configFile = project(':').file('config/checkstyle/checkstyle.xml')
    configProperties = ["suppressionFile": project(':').file('config/checkstyle/suppressions.xml')]
    toolVersion = '8.37'
    ignoreFailures = false
    maxWarnings = 0
}

spotbugs {
    /**
     * https://github.com/spotbugs/spotbugs-gradle-plugin
     */
    ignoreFailures = false
    showStackTraces = true
    showProgress = true
    reportsDir = file("$buildDir/reports/spotbugs")
    maxHeapSize = '1g'
    onlyAnalyze = ['com.chargebee.-']

    /**
     * https://spotbugs.readthedocs.io/en/stable/effort.html
     */
    effort = 'default'

    /**
     * Spotbugs support ignoring / supressing specific checks if they produce false positive.
     * Create the file below to configure exclusion. Refer to documentation on format:
     * https://spotbugs.readthedocs.io/en/latest/filter.html
     */
    excludeFilter = file("config/spotbugs/exclude.xml")
}

spotbugsMain {
    reports {
        html {
            enabled = true
        }
    }
}

spotbugsTest {
    ignoreFailures = true
    showStackTraces = false

    reports {
        html {
            enabled = true
        }
    }
}
